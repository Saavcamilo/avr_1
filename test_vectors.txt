library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

library OpCodes;
use OpCodes.OpCodes.all;


entity cpu_test_tb isend cpu_test_tb;


architecture TB_ARCHITECTURE of cpu_test_tb is


    -- Stimulus signals - signals mapped to the input and inout ports of tested entity    signal  Clock    :  std_logic;
    signal  Reset    :  std_logic;
    signal  DataDB   :  std_logic_vector(7 downto 0);

    -- Observed signals - signals mapped to the output ports of tested entity    signal  DataRd   :  std_logic;
    signal  DataWr   :  std_logic;
    signal  DataAB   :  std_logic_vector(15 downto 0);

    --Signal used to stop clock signal generators    signal  END_SIM  :  BOOLEAN := FALSE;

    -- test value types    type  byte_array    is array (natural range <>) of std_logic_vector(7 downto 0);
    type  addr_array    is array (natural range <>) of std_logic_vector(15 downto 0);

-- expected data bus write signal for each instructionsignal  DataWrTestVals  :  std_logic_vector(0 to 17) :=
    "111111111111111110";

-- expected data bus read signal for each instructionsignal  DataRdTestVals  :  std_logic_vector(0 to 17) :=
    "111111111111111101";

-- supplied data bus values for each instruction (for read operations)signal  DataDBVals      :  byte_array(0 to 17) := (
    "ZZZZZZZZ", "ZZZZZZZZ", "ZZZZZZZZ", "ZZZZZZZZ", "ZZZZZZZZ", 
    "ZZZZZZZZ", "ZZZZZZZZ", "ZZZZZZZZ", "ZZZZZZZZ", "ZZZZZZZZ", 
    "ZZZZZZZZ", "ZZZZZZZZ", "ZZZZZZZZ", "ZZZZZZZZ", "ZZZZZZZZ", 
    "ZZZZZZZZ", "ZZZZZZZZ", X"" );

-- expected data bus output values for each instruction (only has a value on writes)signal  DataDBTestVals  :  byte_array(0 to 17) := (
    "--------", "--------", "--------", "--------", "--------", 
    "--------", "--------", "--------", "--------", "--------", 
    "--------", "--------", "--------", "--------", "--------", 
    "--------", X"",      "--------" );

-- expected data addres bus values for each instructionsignal  DataABTestVals  :  addr_array(0 to 17) := (
    "----------------", "----------------", "----------------", "----------------", "----------------", 
    "----------------", "----------------", "----------------", "----------------", "----------------", 
    "----------------", "----------------", "----------------", "----------------", "----------------", 
    "----------------", X"",            X"" );

